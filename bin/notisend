#!/usr/bin/env bash

# source "$HOME/.aliases"

# --- Metadata ---
VERSION="1.2.0"
COPYRIGHT="Copyright (c) 2025 Virkkunen. All rights reserved."
LICENSE="Apache-2.0 License"

# --- Colour And Formatting Definitions ---
declare -A text=(
  [bold]="\033[1m"
  [reset]="\033[0m"
  [green]="\033[32m"
  [red]="\033[31m"
  [orange]="\033[33m"
  [grey]="\033[38;5;240m"

)

# --- Usage/Help Function ---
usage() {
  cat <<EOF
Usage:  notisend [options] <command> [command arguments]

Sends a notification via ntfy after a command completes

Options:
  -h, --help              Show this help message.
  -v, --version           Show the version information.
  -c, --config            Show the current configuration.
  --create-config         Force creation of a new configuration file.
  -p, --priority <1-5>    Set the notification priority.
  -t, --tags <tag>        Set the notification tags.

Configuration:
  Configuration is stored in $CONFIG_FILE
  If the file does not exist, it will be created interactively 
  when running a command, or you can use --create-config

Logs:
  Logs are stored in $CONFIG_HOME
  By default, 5 log files are stored. 
  Check the configuration file for LOGS_TO_KEEP to change that.

Examples:
  notisend sleep 5
  notisend -p 4 -t "computer" yay -Syu
  notisend -c
  notisend --create-config
EOF
  exit 0
}

# --- Version Function ---
show_version() {
  echo -e "${text[green]}${text[bold]}[notisend]${text[reset]} version $VERSION"
  exit 0
}

# --- Configuration ---
CONFIG_HOME="$HOME/.config/notisend"
CONFIG_FILE="$CONFIG_HOME/notisend.conf"

# --- Default Config ---
# if TITLE is empty, use COMMAND
# TOPIC needs to be defined by the user
declare -A defaultConfig=(
  [TITLE]=""
  [HOST]="ntfy.sh"
  [TOPIC]=""
  [DESC_SIZE]="10"
  [SUCCESS_TAGS]="white_check_mark"
  [SUCCESS_PRIO]="3"
  [ERROR_TAGS]="x"
  [ERROR_PRIO]="4"
  [LOGS_TO_KEEP]="5"
)

create_config() {
  mkdir -p "$CONFIG_HOME"
  >"$CONFIG_FILE"

  local var value
  for var in TITLE HOST TOPIC DESC_SIZE; do
    case $var in
    TITLE)
      echo -e "${text[bold]}${text[green]}Enter the default title for notifications ${text[reset]}(or press Enter to use the wrapped command as a title):"
      ;;
    HOST)
      echo -e "${text[bold]}${text[green]}Enter the default ntfy host ${text[reset]}(or press Enter to use ntfy.sh)"
      ;;
    TOPIC)
      echo -e "${text[bold]}${text[green]}Enter the topic:${text[reset]}"
      echo -e "${text[grey]}Topics don't have to explicitly be created, you can define one now and check it later on https://$HOST/your-topic "
      ;;
    DESC_SIZE)
      echo -e "${text[bold]}${text[green]}Enter the default description size ${text[reset]}(or press Enter for 10 lines):"
      echo -e "${text[grey]}This is the amount of lines from the wrapped command's output to use as a description for the notification"
      ;;
    esac

    while true; do
      read -r -p "> " value
      case $var in
      TOPIC)
        [[ -z "$value" ]] && echo -e "${text[bold]}${text[red]}Please provide a topic.\n${text[reset]}" || break
        ;;
      DESC_SIZE)
        [[ -z "$value" ]] && {
          value=10
          break
        }
        [[ "$value" =~ ^[0-9]+$ ]] && break || echo -e "${text[bold]}${text[red]}Enter a positive number.${text[reset]}"
        ;;
      *)
        break
        ;;
      esac
    done

    echo "${var}=\"${value:-${defaultConfig[$var]}}\"" >>"$CONFIG_FILE"
    echo ""
  done

  cat <<EOF >>"$CONFIG_FILE"
SUCCESS_TAGS="${defaultConfig[SUCCESS_TAGS]}"
SUCCESS_PRIO="${defaultConfig[SUCCESS_PRIO]}"
ERROR_TAGS="${defaultConfig[ERROR_TAGS]}"
ERROR_PRIO="${defaultConfig[ERROR_PRIO]}"
LOGS_TO_KEEP="${defaultConfig[LOGS_TO_KEEP]}"
EOF

  echo -e "\nConfig created at $CONFIG_FILE"
  exit 0
}

load_config() {
  if [[ -f "$CONFIG_FILE" ]] && [[ -s "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
    # check_missing_configs
    return 0 # avoids unnecessary config creation
  else
    echo -e "${text[orange]}No config file found, creating a new one...\n"
    create_config
    return 0
  fi
}

show_config() {
  if [[ -f "$CONFIG_FILE" ]] && [[ -s "$CONFIG_FILE" ]]; then
    sed 's/#[^"]*$//' "$CONFIG_FILE" | sed '/^$/d'
  else
    echo "No configuration file found." >&2 # error message to stderr
    exit 1
  fi
  exit 0
}

# --- Wrapped Command ---
run_command() {
  temp_log=$(mktemp "$CONFIG_HOME"/notisend.XXXXXXXX) || { echo -e "${text[red]}Failed to create temp file" >&2; exit 1; }
  "${COMMAND[@]}" 2>&1 | tee "$temp_log"
  EXIT_CODE="${PIPESTATUS[0]}" # get the exit code from the command instead of tee
  DESC=$(tail -n "$DESC_SIZE" "$temp_log" | sed 's/\x1b\[[0-9;]*m//g') # sed to remove escape codes
  check_exit_code
}

check_exit_code() {
  # this is for the wrapped command
  if [[ "$EXIT_CODE" -eq 0 ]]; then
    TAGS="$SUCCESS_TAGS"
    PRIO="$SUCCESS_PRIO"
  else
    TAGS="$ERROR_TAGS"
    PRIO="$ERROR_PRIO"
  fi
}

send_ntfy() {
  local LOG_FILE_NAMED="$CONFIG_HOME/notisend_$(date +%Y%m%d_%H%M%S).log" || { echo -e "${text[red]}Failed to create temp file" >&2; exit 1; }
  temp_error_log=$(mktemp "$CONFIG_HOME"/notisend_error.XXXXXXXX) || { echo -e "${text[red]}Failed to create temp error file" >&2; exit 1; }

  [[ -z "$TITLE" ]] && printf -v NOTI_TITLE '%q ' "${COMMAND[@]}" || NOTI_TITLE="$TITLE"

  curl -# --fail-with-body -o "$LOG_FILE_NAMED" \
    -H "Title: $NOTI_TITLE" \
    -H "Tags: $TAGS" \
    -H "Priority: $PRIO" \
    -d "$DESC" \
    "$HOST"/"$TOPIC" 2>"$temp_error_log"

  if [[ "$?" -eq 0 ]]; then
    echo -e "\n>> ${text[green]}${text[bold]}[notisend]${text[reset]} posted notification\n"
  else
    echo -e "\n>> ${text[red]}${text[bold]}[notisend]${text[reset]} error. See $LOG_FILE_NAMED for details.\n"
    cat "$temp_error_log" >>"$LOG_FILE_NAMED"
  fi
}

# --- Cleanup ---
cleanup() {
  [[ -f "$temp_log" ]] && rm -f $temp_log
  [[ -f "$temp_error_log" ]] && rm -f $temp_error_log

  # Log rotation, keep only the LOGS_TO_KEEP most recent log files
  local -a log_files=("$CONFIG_HOME"/notisend_*.log)
  local num_logs=${#log_files[@]}

  [[ $num_logs -gt "$LOGS_TO_KEEP" ]] && rm -f -- "${log_files[@]:0:$((num_logs - LOGS_TO_KEEP))}"
}

# --- Argument Parsing ---
args=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h | --help)        usage ;;
    -v | --version)     show_version ;;
    -c | --config)      show_config ;;
    --create-config)    create_config ;;
    --)
      shift
      COMMAND+=("$@")
      break
      ;;
    -*)
      echo -e "${text[bold]}${text[red]}Invalid option: $1${text[reset]}" >&2
      usage
      exit 1
      ;;
    *)
      COMMAND+=("$@")
      break
      ;;
  esac
  shift
done

# --- Main Execution ---
# Check if any arguments were provided
[[ ${#COMMAND[@]} -eq 0 ]] && {
  echo -e "${text[bold]}${text[red]}Error:${text[reset]} No command provided.\n" >&2
  usage
  exit 1
}

# COMMAND=("${args[@]}") # recreate the COMMAND array after option processing

load_config
run_command
send_ntfy
cleanup

exit "$EXIT_CODE"
